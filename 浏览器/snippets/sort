function bubble(arr) {
    for(let i=0, len = arr.length; i< len - 1; i++) {
        for(let j=0; j<len-i-1; j++) {
           if(arr[j] > arr[j+1]) {
                [arr[j], arr[j+1]] = [ arr[j+1], arr[j]]
            }
        }
    }

    return arr;
}

// 每次都选择一个最小的数 从头开始其余元素与选取元素比较
function selection(arr) {
    for(let i=0, len = arr.length; i<len-1; i++) {

        for(let j = i+1; j< len; j++) {
            if(arr[j] < arr[i]) {
                [arr[i], arr[j] ] = [ arr[j], arr[i]]
            }
        }
    }

    return arr;
}


// 一个元素一个元素的插入数组，使用优化的插入排序，在同一个数组内操作
function insert(arr) {
    if(Array.isArray(arr) && arr.length === 2) return arr;
    for(let i=1, len = arr.length; i< len; i++) {
        let temp = arr[i];
        let j = i -1;
        while(j>=0 && arr[j] > temp) {
            arr[j+1] = arr[j];
            j--;
        }
        arr[j+1] = temp;
    } 
    return arr;  
}

// 希尔排序 对插入排序的优化
function shallSort(arr) {
    const len = arr.length;
    let gap = parseInt(len / 2, 10);
    while(gap > 0) {
        for(let i = gap; i < len; i++) {
            insertGap(arr, gap, i)
        }
        gap = parseInt(gap / 2, 10);
    }
    return arr;
}

function insertGap(arr, gap, i) {
    const insertVal = arr[i];
    let j;
    for(j=i-gap; j>=0 && arr[j] > insertVal; j -= gap) {
        arr[j+gap] = arr[j]
    }
    arr[j+gap] = insertVal;
}


// 快速排序 选取一个值，然后将大于和小于选定值的数分到两个数组中然后分别排序
function quickSort( arr) {
   const LENGTH = arr.length;
   if(!LENGTH) {
       return []; 
   }

   const left = [];
   const right = [];
   const pivot = arr[0];
   for(let i = 1; i < LENGTH; i++) {
        if(arr[i] < pivot) {
            left.push(arr[i])  
        } else {
            right.push(arr[i])
        }
   }
   return quickSort(left).concat(pivot, quickSort(right))
}

// 归并排序
function mergeSort(arr) {
    const LENGTH = arr.length;
    if(LENGTH < 2) {
        return arr;
    }

    const mid = Math.floor(LENGTH / 2);
    const left = arr.slice(0 ,mid);
    const right = arr.slice(mid);
    return merge(mergeSort(left), mergeSort(right));
}  

function merge(left, right) {
    let result = [];
    while(left.length && right.length) {
        result.push(left[0] <= right[0] ? left.shift() : right.shift())
    }

    if(left.length) {
        result = result.concat(left)
    }

    if(right.length) {
        result = result.concat(right);
    }

    return result;

}


console.log(mergeSort([3,2,7, 1, 3, 4, 9]))